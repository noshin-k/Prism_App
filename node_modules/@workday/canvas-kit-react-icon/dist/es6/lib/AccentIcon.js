var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { colors } from '@workday/canvas-kit-react-core';
import { CanvasIconTypes } from '@workday/design-assets-types';
import Icon from './Icon';
export var accentIconStyles = function (_a) {
    var _b = _a.color, color = _b === void 0 ? colors.blueberry500 : _b, _c = _a.transparent, transparent = _c === void 0 ? false : _c;
    return ({
        '& .color-500': {
            fill: color,
        },
        '& .french-vanilla-100': {
            fill: transparent ? 'transparent' : colors.frenchVanilla100,
        },
    });
};
var AccentIcon = (function (_super) {
    __extends(AccentIcon, _super);
    function AccentIcon() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AccentIcon.prototype.render = function () {
        var _a = this.props, icon = _a.icon, color = _a.color, transparent = _a.transparent, size = _a.size, elemProps = __rest(_a, ["icon", "color", "transparent", "size"]);
        return (React.createElement(Icon, { src: icon, type: CanvasIconTypes.Accent, styles: accentIconStyles({ color: color, transparent: transparent }), size: size, elemProps: elemProps }));
    };
    return AccentIcon;
}(React.Component));
export default AccentIcon;
