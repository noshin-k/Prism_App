var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { iconColors } from '@workday/canvas-kit-react-core';
import { CanvasIconTypes } from '@workday/design-assets-types';
import Icon from './Icon';
export var systemIconStyles = function (_a) {
    var accent = _a.accent, accentHover = _a.accentHover, _b = _a.background, background = _b === void 0 ? 'transparent' : _b, _c = _a.backgroundHover, backgroundHover = _c === void 0 ? 'transparent' : _c, _d = _a.color, color = _d === void 0 ? iconColors.standard : _d, _e = _a.colorHover, colorHover = _e === void 0 ? iconColors.hover : _e, fill = _a.fill, fillHover = _a.fillHover;
    return ({
        '& .wd-icon-fill': {
            fill: fill || color,
        },
        ':hover .wd-icon-fill': {
            fill: fillHover || colorHover,
        },
        '& .wd-icon-accent, & .wd-icon-accent2': {
            fill: accent || color,
        },
        ':hover .wd-icon-accent, :hover .wd-icon-accent2': {
            fill: accentHover || colorHover,
        },
        '& .wd-icon-background': {
            fill: background,
        },
        ':hover .wd-icon-background': {
            fill: backgroundHover,
        },
    });
};
var SystemIcon = (function (_super) {
    __extends(SystemIcon, _super);
    function SystemIcon() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SystemIcon.prototype.render = function () {
        var _a = this.props, icon = _a.icon, accent = _a.accent, accentHover = _a.accentHover, background = _a.background, backgroundHover = _a.backgroundHover, color = _a.color, colorHover = _a.colorHover, fill = _a.fill, fillHover = _a.fillHover, size = _a.size, elemProps = __rest(_a, ["icon", "accent", "accentHover", "background", "backgroundHover", "color", "colorHover", "fill", "fillHover", "size"]);
        var style = systemIconStyles({
            accent: accent,
            accentHover: accentHover,
            background: background,
            backgroundHover: backgroundHover,
            color: color,
            colorHover: colorHover,
            fill: fill,
            fillHover: fillHover,
        });
        return (React.createElement(Icon, { src: icon, type: CanvasIconTypes.System, size: size, styles: style, elemProps: elemProps }));
    };
    return SystemIcon;
}(React.Component));
export default SystemIcon;
