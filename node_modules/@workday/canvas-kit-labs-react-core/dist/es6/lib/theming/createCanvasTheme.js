var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import chroma from 'chroma-js';
import merge from 'lodash/merge';
import colors from '@workday/canvas-colors-web';
import { defaultCanvasTheme } from './theme';
import { ContentDirection, } from './types';
var gradients = colors.gradients, primary = colors.primary, allColors = __rest(colors, ["gradients", "primary"]);
var ColorDirection;
(function (ColorDirection) {
    ColorDirection[ColorDirection["Darken"] = 0] = "Darken";
    ColorDirection[ColorDirection["Brighten"] = 1] = "Brighten";
})(ColorDirection || (ColorDirection = {}));
function shiftColor(hexColor, direction) {
    var canvasColor = Object.keys(allColors).find(function (key) { return allColors[key] === hexColor; });
    var darken = direction === ColorDirection.Darken;
    if (canvasColor) {
        var colorRegex = /([a-zAz]*)(\d{3})/g;
        var match = colorRegex.exec(canvasColor);
        if (match) {
            var baseColor = match[1];
            var shadeNumber = parseInt(match[2], 10);
            var newShade = darken ? shadeNumber + 100 : shadeNumber - 100;
            if (newShade >= 100 && newShade <= 600) {
                return colors[(baseColor + newShade)];
            }
        }
    }
    try {
        var newColor = darken ? chroma(hexColor).darken() : chroma(hexColor).brighten();
        return newColor.hex();
    }
    catch (e) {
        console.warn("Invalid color '" + hexColor + "' used in theme");
        return hexColor;
    }
}
function fillPalette(palette) {
    if (!palette) {
        return {};
    }
    var shades = __assign({}, palette);
    if (!shades.main) {
        console.warn('The color provided to fillPalette(palette) is invalid. The palette object needs to have a `main` property');
        return {};
    }
    var dark = shades.dark || shiftColor(shades.main, ColorDirection.Darken);
    var darkest = shades.darkest || shiftColor(dark, ColorDirection.Darken);
    var light = shades.light || shiftColor(shades.main, ColorDirection.Brighten);
    var lightest = shades.lightest || shiftColor(light, ColorDirection.Brighten);
    return {
        lightest: lightest,
        light: light,
        main: shades.main,
        dark: dark,
        darkest: darkest,
        contrast: shades.contrast || colors.frenchVanilla100,
    };
}
export function createCanvasTheme(partialTheme) {
    var _a = partialTheme.palette, palette = _a === void 0 ? {} : _a, _b = partialTheme.breakpoints, breakpoints = _b === void 0 ? {} : _b, direction = partialTheme.direction;
    var _c = palette, primary = _c.primary, alert = _c.alert, error = _c.error, success = _c.success, neutral = _c.neutral, _d = _c.common, common = _d === void 0 ? {} : _d;
    var mergeable = {
        palette: {
            common: common,
            primary: fillPalette(primary),
            alert: fillPalette(alert),
            error: fillPalette(error),
            success: fillPalette(success),
            neutral: fillPalette(neutral),
        },
        breakpoints: breakpoints,
        direction: direction === ContentDirection.RTL ? direction : ContentDirection.LTR,
    };
    return merge({}, defaultCanvasTheme, mergeable);
}
