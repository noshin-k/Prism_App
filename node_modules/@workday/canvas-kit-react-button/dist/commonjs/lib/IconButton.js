'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IconButtonCon = exports.iconButtonIdentifier = undefined;

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _canvasKitLabsReactCore = require('@workday/canvas-kit-labs-react-core');

var _isPropValid = require('@emotion/is-prop-valid');

var _isPropValid2 = _interopRequireDefault(_isPropValid);

var _types = require('./types');

var _ButtonStyles = require('./ButtonStyles');

var _utils = require('./utils');

var _canvasKitReactCore = require('@workday/canvas-kit-react-core');

var _canvasKitReactIcon = require('@workday/canvas-kit-react-icon');

var _canvasKitReactCommon = require('@workday/canvas-kit-react-common');

var _core = require('@emotion/core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = undefined && undefined.__assign || function () {
    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = undefined && undefined.__rest || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};

function getFillSelector(fillColor) {
    return {
        '&:focus span .wd-icon-fill, &:hover span .wd-icon-fill, span .wd-icon-fill': {
            fill: fillColor
        }
    };
}
function getBackgroundSelector(fillColor) {
    return {
        '&:hover span .wd-icon-background, span .wd-icon-background': {
            fill: fillColor
        }
    };
}
function getAccentSelector(fillColor) {
    return {
        '&:focus span .wd-icon-accent, &:hover span .wd-icon-accent, span .wd-icon-accent': {
            fill: fillColor
        }
    };
}
var iconButtonIdentifier = exports.iconButtonIdentifier = 'wdc-ckr-icon-button';
var IconButtonCon = exports.IconButtonCon = (0, _canvasKitLabsReactCore.styled)('button', {
    shouldForwardProp: function (prop) {
        return (0, _isPropValid2.default)(prop) && prop !== 'size';
    }
})(_ButtonStyles.iconButtonStyles.styles, function (_a) {
    var variant = _a.variant;
    return (0, _utils.getButtonStyle)(_ButtonStyles.iconButtonStyles, variant);
}, function (_a) {
    var size = _a.size,
        variant = _a.variant;
    switch (size) {
        default:
        case _types.IconButtonSize.Medium:
            return __assign({ margin: variant === _types.IconButtonVariant.Plain ? '-8px' : undefined }, _ButtonStyles.iconButtonStyles.variants.sizes.medium);
        case _types.IconButtonSize.Small:
            return __assign({ margin: variant === _types.IconButtonVariant.Plain ? '-6px' : undefined }, _ButtonStyles.iconButtonStyles.variants.sizes.small);
    }
}, function (_a) {
    var variant = _a.variant,
        toggled = _a.toggled;
    if (!toggled) {
        return {};
    }
    switch (variant) {
        case _types.IconButtonVariant.CircleFilled:
        case _types.IconButtonVariant.SquareFilled:
        case _types.IconButtonVariant.Circle:
        case _types.IconButtonVariant.Square:
        default:
            {
                return __assign({ backgroundColor: _canvasKitReactCore.colors.blueberry400 }, getFillSelector(_canvasKitReactCore.colors.frenchVanilla100), getAccentSelector(_canvasKitReactCore.colors.blueberry400), getBackgroundSelector(_canvasKitReactCore.colors.frenchVanilla100), { '&:focus&:hover, &:focus, &:active, &:active:hover': __assign({}, getFillSelector(_canvasKitReactCore.colors.frenchVanilla100), getAccentSelector(_canvasKitReactCore.colors.blueberry400), getBackgroundSelector(_canvasKitReactCore.colors.frenchVanilla100), { backgroundColor: _canvasKitReactCore.colors.blueberry500 }), '&:not([disabled])': {
                        '&:focus, &:focus:active': __assign({ backgroundColor: _canvasKitReactCore.colors.blueberry500 }, toggled ? (0, _canvasKitReactCommon.focusRing)(2, 2) : {})
                    }, '&:hover, &:active': __assign({}, getFillSelector(_canvasKitReactCore.colors.frenchVanilla100), getAccentSelector(_canvasKitReactCore.colors.blueberry400), getBackgroundSelector(_canvasKitReactCore.colors.frenchVanilla100), { backgroundColor: _canvasKitReactCore.colors.blueberry500 }), '&:disabled, &:active:disabled, &:focus:disabled, &:hover:disabled': __assign({ backgroundColor: _canvasKitReactCore.colors.blueberry100 }, getFillSelector(_canvasKitReactCore.colors.blueberry300), getAccentSelector(_canvasKitReactCore.colors.frenchVanilla100), getBackgroundSelector(_canvasKitReactCore.colors.blueberry300)) }, (0, _canvasKitReactCommon.mouseFocusBehavior)({
                    '&:focus:active': __assign({}, getFillSelector(_canvasKitReactCore.colors.frenchVanilla100), getAccentSelector(_canvasKitReactCore.colors.blueberry400), getBackgroundSelector(_canvasKitReactCore.colors.frenchVanilla100), { backgroundColor: _canvasKitReactCore.colors.blueberry500 + " !important" })
                }));
            }
        case _types.IconButtonVariant.Plain:
            return __assign({ backgroundColor: 'transparent' }, getFillSelector(_canvasKitReactCore.colors.blueberry400), getAccentSelector(_canvasKitReactCore.colors.frenchVanilla100), getBackgroundSelector(_canvasKitReactCore.colors.blueberry400), { '&:focus:hover, &:focus, &:active, &:active:hover': __assign({}, getFillSelector(_canvasKitReactCore.colors.blueberry400), getAccentSelector(_canvasKitReactCore.colors.frenchVanilla100), getBackgroundSelector(_canvasKitReactCore.colors.blueberry400)), '&:not([disabled]):focus': __assign({}, getFillSelector(_canvasKitReactCore.colors.blueberry400), getAccentSelector(_canvasKitReactCore.colors.frenchVanilla100), getBackgroundSelector(_canvasKitReactCore.colors.blueberry400), toggled ? (0, _canvasKitReactCommon.focusRing)(2, 0) : {}), '&:disabled, &:active:disabled, &:focus:disabled, &:hover:disabled': __assign({}, getFillSelector(_canvasKitReactCore.colors.blueberry200), getAccentSelector(_canvasKitReactCore.colors.frenchVanilla100), getBackgroundSelector(_canvasKitReactCore.colors.blueberry200)) });
        case _types.IconButtonVariant.Inverse:
        case _types.IconButtonVariant.InverseFilled:
            return __assign({}, getFillSelector(_canvasKitReactCore.colors.blueberry400), getAccentSelector(_canvasKitReactCore.colors.frenchVanilla100), getBackgroundSelector(_canvasKitReactCore.colors.blueberry400), { backgroundColor: _canvasKitReactCore.colors.frenchVanilla100, '&:focus': __assign({ backgroundColor: _canvasKitReactCore.colors.frenchVanilla100 }, getFillSelector(_canvasKitReactCore.colors.blueberry400), getAccentSelector(_canvasKitReactCore.colors.frenchVanilla100), getBackgroundSelector(_canvasKitReactCore.colors.blueberry400)), '&:focus&:hover, &:active, &:active:hover': __assign({ backgroundColor: _canvasKitReactCore.colors.frenchVanilla100 }, getFillSelector(_canvasKitReactCore.colors.blueberry400), getAccentSelector(_canvasKitReactCore.colors.frenchVanilla100), getBackgroundSelector(_canvasKitReactCore.colors.blueberry400)), '&:focus:active': {
                    backgroundColor: _canvasKitReactCore.colors.frenchVanilla100
                }, '&:hover': {
                    backgroundColor: _canvasKitReactCore.colors.frenchVanilla100
                }, '&:not([disabled])': {
                    '&:focus': __assign({ backgroundColor: _canvasKitReactCore.colors.frenchVanilla100 }, toggled ? (0, _canvasKitReactCommon.focusRing)(2, 2, true, false, 'currentColor', _canvasKitReactCore.colors.frenchVanilla100) : {}),
                    '&:focus:active': {
                        backgroundColor: _canvasKitReactCore.colors.frenchVanilla100
                    }
                }, '&:disabled, &:active:disabled, &:focus:disabled, &:hover:disabled': __assign({ backgroundColor: 'rgba(255,255,255,0.75)' }, getFillSelector(_canvasKitReactCore.colors.blueberry400), getAccentSelector(_canvasKitReactCore.colors.frenchVanilla100), getBackgroundSelector(_canvasKitReactCore.colors.blueberry400)) }, (0, _canvasKitReactCommon.mouseFocusBehavior)({
                '&:focus:active': {
                    backgroundColor: _canvasKitReactCore.colors.frenchVanilla100 + " !important"
                }
            }));
    }
});
var IconButton = function (_super) {
    __extends(IconButton, _super);
    function IconButton() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IconButton.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.toggled !== this.props.toggled && typeof this.props.onToggleChange === 'function') {
            this.props.onToggleChange(this.props.toggled);
        }
    };
    IconButton.prototype.render = function () {
        var _a = this.props,
            buttonRef = _a.buttonRef,
            size = _a.size,
            variant = _a.variant,
            onToggleChange = _a.onToggleChange,
            icon = _a.icon,
            toggled = _a.toggled,
            children = _a.children,
            className = _a.className,
            elemProps = __rest(_a, ["buttonRef", "size", "variant", "onToggleChange", "icon", "toggled", "children", "className"]);
        return React.createElement(_core.ClassNames, null, function (_a) {
            var cx = _a.cx;
            return React.createElement(IconButtonCon, __assign({ toggled: toggled, ref: buttonRef, variant: variant, size: size, "aria-pressed": toggled, className: cx(iconButtonIdentifier, className) }, elemProps), icon ? React.createElement(_canvasKitReactIcon.SystemIcon, { icon: icon }) : children);
        });
    };
    IconButton.Variant = _types.IconButtonVariant;
    IconButton.Size = _types.IconButtonSize;
    IconButton.defaultProps = {
        variant: _types.IconButtonVariant.Circle,
        size: _types.IconButtonSize.Medium
    };
    return IconButton;
}(React.Component);
exports.default = IconButton;