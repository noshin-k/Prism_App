'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.iconButtonStyles = exports.textButtonStyles = exports.dropdownButtonStyles = exports.canvasButtonStyles = exports.deprecatedButtonStyles = exports.labelIconBaseStyles = exports.labelDataBaseStyles = exports.labelBaseStyles = exports.CANVAS_BUTTON_HEIGHT_SMALL = exports.CANVAS_BUTTON_HEIGHT_MEDIUM = exports.CANVAS_BUTTON_HEIGHT_LARGE = undefined;

var _canvasKitReactCore = require('@workday/canvas-kit-react-core');

var _canvasKitReactCore2 = _interopRequireDefault(_canvasKitReactCore);

var _types = require('./types');

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __assign = undefined && undefined.__assign || function () {
    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
var CANVAS_BUTTON_HEIGHT_LARGE = exports.CANVAS_BUTTON_HEIGHT_LARGE = 40;
var CANVAS_BUTTON_HEIGHT_MEDIUM = exports.CANVAS_BUTTON_HEIGHT_MEDIUM = 24;
var CANVAS_BUTTON_HEIGHT_SMALL = exports.CANVAS_BUTTON_HEIGHT_SMALL = 18;
var labelBaseStyles = exports.labelBaseStyles = {
    classname: 'button-label',
    styles: {
        position: 'relative',
        ':hover:active': {
            backgroundColor: 'transparent'
        },
        textOverflow: 'ellipsis',
        overflow: 'hidden',
        whiteSpace: 'nowrap',
        fontWeight: 700,
        fontFamily: '"Roboto", "Helvetica Neue", "Helvetica", "Arial", sans-serif',
        WebkitFontSmoothing: 'antialiased',
        MozOsxFontSmoothing: 'grayscale'
    },
    variants: {
        types: (_a = {}, _a[_types.TextButtonVariant.Default] = {
            padding: '0'
        }, _a[_types.TextButtonVariant.AllCaps] = __assign({}, _canvasKitReactCore2.default.type.variant.caps, { fontSize: '14px', letterSpacing: '.5px', padding: '0' }), _a[_types.DeprecatedButtonVariant.Primary] = {
            fontSize: 'inherit',
            fontWeight: 'inherit',
            padding: '0'
        }, _a[_types.DeprecatedButtonVariant.Secondary] = {
            fontSize: 'inherit',
            fontWeight: 'inherit',
            padding: '0'
        }, _a[_types.DeprecatedButtonVariant.Delete] = {
            fontSize: 'inherit',
            fontWeight: 'inherit',
            padding: '0'
        }, _a),
        sizes: (_b = {}, _b[_types.ButtonSize.Large] = {
            fontSize: '16px',
            padding: '0 12px'
        }, _b[_types.ButtonSize.Medium] = {
            fontSize: '14px',
            padding: '0 8px'
        }, _b[_types.ButtonSize.Small] = {
            fontSize: '14px',
            padding: '0'
        }, _b)
    }
};
var labelDataBaseStyles = exports.labelDataBaseStyles = {
    classname: 'button-label-data',
    styles: __assign({}, labelBaseStyles.styles, { fontWeight: 400, fontSize: '16px' }),
    variants: {
        types: {},
        sizes: (_c = {}, _c[_types.ButtonSize.Large] = {
            paddingRight: '12px'
        }, _c[_types.ButtonSize.Medium] = {
            paddingRight: '8px',
            fontSize: '14px'
        }, _c)
    }
};
var labelIconBaseStyles = exports.labelIconBaseStyles = {
    classname: 'button-label-icon',
    styles: {
        display: 'flex'
    },
    variants: {
        types: (_d = {}, _d[_types.IconPosition.Left] = {
            padding: '0 8px 0 0'
        }, _d[_types.IconPosition.Right] = {
            padding: '0 0 0 8px'
        }, _d),
        sizes: (_e = {}, _e[_types.ButtonSize.Large] = {
            paddingLeft: '8px'
        }, _e[_types.ButtonSize.Medium] = {
            paddingLeft: '4px'
        }, _e)
    }
};
var deprecatedButtonStyles = exports.deprecatedButtonStyles = {
    classname: 'canvas-deprecated-button',
    styles: {
        boxSizing: 'border-box',
        display: 'inline-flex',
        alignItems: 'center',
        justifyContent: 'center',
        fontSize: '13px',
        borderRadius: _canvasKitReactCore.borderRadius.circle,
        border: '1px solid transparent',
        boxShadow: 'none',
        position: 'relative',
        cursor: 'pointer',
        outline: 'none',
        transition: 'box-shadow 120ms linear, border 120ms linear, background-color 120ms linear, color 120ms linear',
        '&:hover:active': { transitionDuration: '40ms' },
        '&:disabled, &:disabled:active': { cursor: 'default', boxShadow: 'none' }
    },
    variants: {
        types: (_f = {}, _f[_types.DeprecatedButtonVariant.Primary] = __assign({}, (0, _utils.getButtonStateStyle)(_types.DeprecatedButtonVariant.Primary)), _f[_types.DeprecatedButtonVariant.Secondary] = __assign({}, (0, _utils.getButtonStateStyle)(_types.DeprecatedButtonVariant.Secondary)), _f[_types.DeprecatedButtonVariant.Delete] = __assign({}, (0, _utils.getButtonStateStyle)(_types.DeprecatedButtonVariant.Delete)), _f),
        sizes: (_g = {}, _g[_types.ButtonSize.Large] = {
            height: CANVAS_BUTTON_HEIGHT_LARGE + "px",
            padding: "0 " + _canvasKitReactCore2.default.spacing.l,
            minWidth: '112px',
            maxWidth: '288px',
            fontSize: '14px',
            fontWeight: 500
        }, _g[_types.ButtonSize.Medium] = {
            height: CANVAS_BUTTON_HEIGHT_MEDIUM + "px",
            padding: "0 " + _canvasKitReactCore2.default.spacing.m,
            minWidth: '80px',
            maxWidth: '200px',
            fontSize: '13px',
            fontWeight: 500
        }, _g[_types.ButtonSize.Small] = {
            height: CANVAS_BUTTON_HEIGHT_SMALL + "px",
            padding: "0 " + _canvasKitReactCore2.default.spacing.xxs,
            minWidth: '56px',
            maxWidth: '120px',
            fontSize: '10px',
            fontWeight: 500
        }, _g)
    }
};
var canvasButtonStyles = exports.canvasButtonStyles = {
    classname: 'canvas-button',
    styles: __assign({}, deprecatedButtonStyles.styles, { verticalAlign: 'middle', border: '2px solid transparent', fontSize: '14px' }),
    variants: {
        types: (_h = {}, _h[_types.ButtonVariant.Primary] = __assign({}, (0, _utils.getButtonStateStyle)(_types.ButtonVariant.Primary)), _h[_types.ButtonVariant.Secondary] = __assign({}, (0, _utils.getButtonStateStyle)(_types.ButtonVariant.Secondary)), _h[_types.ButtonVariant.Delete] = __assign({}, (0, _utils.getButtonStateStyle)(_types.ButtonVariant.Delete)), _h[_types.ButtonVariant.Highlight] = __assign({}, (0, _utils.getButtonStateStyle)(_types.ButtonVariant.Highlight)), _h[_types.ButtonVariant.OutlinePrimary] = __assign({}, (0, _utils.getButtonStateStyle)(_types.ButtonVariant.OutlinePrimary)), _h[_types.ButtonVariant.OutlineSecondary] = __assign({}, (0, _utils.getButtonStateStyle)(_types.ButtonVariant.OutlineSecondary)), _h[_types.ButtonVariant.OutlineInverse] = __assign({}, (0, _utils.getButtonStateStyle)(_types.ButtonVariant.OutlineInverse)), _h),
        sizes: (_j = {}, _j[_types.ButtonSize.Large] = {
            minWidth: '112px',
            height: '48px',
            padding: '0 20px'
        }, _j[_types.ButtonSize.Medium] = {
            minWidth: '96px',
            height: _canvasKitReactCore2.default.spacing.xl,
            padding: '0 16px'
        }, _j[_types.ButtonSize.Small] = {
            minWidth: '80px',
            height: _canvasKitReactCore2.default.spacing.l,
            padding: '0 16px'
        }, _j)
    }
};
var dropdownButtonStyles = exports.dropdownButtonStyles = {
    classname: 'dropdown-button',
    styles: __assign({}, canvasButtonStyles.styles),
    variants: {
        types: (_k = {}, _k[_types.ButtonVariant.Primary] = canvasButtonStyles.variants.types[_types.ButtonVariant.Primary], _k[_types.ButtonVariant.Secondary] = canvasButtonStyles.variants.types[_types.ButtonVariant.Secondary], _k),
        sizes: (_l = {}, _l[_types.ButtonSize.Large] = canvasButtonStyles.variants.sizes.large, _l[_types.ButtonSize.Medium] = canvasButtonStyles.variants.sizes.medium, _l)
    }
};
var textButtonStyles = exports.textButtonStyles = {
    classname: 'text-button',
    styles: __assign({}, deprecatedButtonStyles.styles, { borderRadius: _canvasKitReactCore.borderRadius.m, border: '0', margin: '0 8px', minWidth: 'auto', '&:hover:not([disabled])': { textDecoration: 'underline' } }),
    variants: {
        types: (_m = {}, _m[_types.TextButtonVariant.Default] = __assign({}, (0, _utils.getButtonStateStyle)(_types.TextButtonVariant.Default)), _m[_types.TextButtonVariant.Inverse] = __assign({}, (0, _utils.getButtonStateStyle)(_types.TextButtonVariant.Inverse)), _m[_types.TextButtonVariant.AllCaps] = __assign({}, (0, _utils.getButtonStateStyle)(_types.TextButtonVariant.Default), { height: _canvasKitReactCore2.default.spacing.l }), _m[_types.TextButtonVariant.InverseAllCaps] = __assign({}, (0, _utils.getButtonStateStyle)(_types.TextButtonVariant.Inverse), { height: _canvasKitReactCore2.default.spacing.l }), _m),
        sizes: (_o = {}, _o[_types.ButtonSize.Large] = {
            height: _canvasKitReactCore2.default.spacing.xl,
            padding: '0 8px'
        }, _o[_types.ButtonSize.Small] = {
            height: _canvasKitReactCore2.default.spacing.l,
            padding: '0 8px'
        }, _o)
    }
};
var iconButtonStyles = exports.iconButtonStyles = {
    classname: 'icon-button',
    styles: __assign({}, deprecatedButtonStyles.styles, (_p = { borderWidth: '0', borderRadius: _canvasKitReactCore.borderRadius.circle }, _p['& .wd-icon'] = {
        display: 'inline-block',
        verticalAlign: 'middle'
    }, _p)),
    variants: {
        sizes: (_q = {}, _q[_types.ButtonSize.Small] = {
            minWidth: _canvasKitReactCore2.default.spacing.l,
            width: 'auto',
            height: _canvasKitReactCore2.default.spacing.l,
            'span svg': {
                width: '20px',
                height: '20px'
            }
        }, _q[_types.ButtonSize.Medium] = {
            minWidth: _canvasKitReactCore2.default.spacing.xl,
            width: _canvasKitReactCore2.default.spacing.xl,
            height: _canvasKitReactCore2.default.spacing.xl
        }, _q),
        types: (_r = {}, _r[_types.IconButtonVariant.Square] = __assign({ borderRadius: _canvasKitReactCore.borderRadius.m, minWidth: _canvasKitReactCore2.default.spacing.l, width: _canvasKitReactCore2.default.spacing.l, height: _canvasKitReactCore2.default.spacing.l }, (0, _utils.getIconButtonStateStyle)(_types.IconButtonVariant.Square)), _r[_types.IconButtonVariant.SquareFilled] = __assign({ borderRadius: _canvasKitReactCore.borderRadius.m, minWidth: _canvasKitReactCore2.default.spacing.l, width: _canvasKitReactCore2.default.spacing.l, height: _canvasKitReactCore2.default.spacing.l }, (0, _utils.getIconButtonStateStyle)(_types.IconButtonVariant.SquareFilled)), _r[_types.IconButtonVariant.Plain] = __assign({}, (0, _utils.getIconButtonStateStyle)(_types.IconButtonVariant.Plain)), _r[_types.IconButtonVariant.Circle] = __assign({}, (0, _utils.getIconButtonStateStyle)(_types.IconButtonVariant.Circle)), _r[_types.IconButtonVariant.CircleFilled] = __assign({}, (0, _utils.getIconButtonStateStyle)(_types.IconButtonVariant.CircleFilled)), _r[_types.IconButtonVariant.Inverse] = __assign({}, (0, _utils.getIconButtonStateStyle)(_types.IconButtonVariant.Inverse)), _r[_types.IconButtonVariant.InverseFilled] = __assign({}, (0, _utils.getIconButtonStateStyle)(_types.IconButtonVariant.InverseFilled)), _r)
    }
};