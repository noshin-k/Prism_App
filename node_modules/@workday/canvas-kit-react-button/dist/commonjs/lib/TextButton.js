'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _ButtonBase = require('./ButtonBase');

var _utils = require('./utils');

var _canvasKitLabsReactCore = require('@workday/canvas-kit-labs-react-core');

var _isPropValid = require('@emotion/is-prop-valid');

var _isPropValid2 = _interopRequireDefault(_isPropValid);

var _types = require('./types');

var _ButtonStyles = require('./ButtonStyles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var __extends = undefined && undefined.__extends || function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = undefined && undefined.__assign || function () {
    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = undefined && undefined.__rest || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};

var TextButtonCon = (0, _canvasKitLabsReactCore.styled)('button', {
    shouldForwardProp: function (prop) {
        return (0, _isPropValid2.default)(prop) && prop !== 'size';
    }
})(_ButtonStyles.textButtonStyles.styles, function (_a) {
    var variant = _a.variant;
    return (0, _utils.getButtonStyle)(_ButtonStyles.textButtonStyles, variant);
}, function (_a) {
    var size = _a.size;
    var sizes = _ButtonStyles.textButtonStyles.variants.sizes;
    switch (size) {
        case _types.ButtonSize.Large:
        default:
            return sizes.large;
        case _types.ButtonSize.Medium:
        case _types.ButtonSize.Small:
            return sizes.small;
    }
});
var TextButton = function (_super) {
    __extends(TextButton, _super);
    function TextButton() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TextButton.prototype.render = function () {
        var _a = this.props,
            buttonRef = _a.buttonRef,
            onClick = _a.onClick,
            children = _a.children,
            iconPosition = _a.iconPosition,
            size = _a.size,
            variant = _a.variant,
            icon = _a.icon,
            elemProps = __rest(_a, ["buttonRef", "onClick", "children", "iconPosition", "size", "variant", "icon"]);
        return React.createElement(TextButtonCon, __assign({ onClick: onClick, ref: buttonRef, size: size, variant: variant }, elemProps), icon && iconPosition === _types.IconPosition.Left && React.createElement(_ButtonBase.ButtonLabelIcon, { size: size, iconPosition: iconPosition, icon: icon }), React.createElement(_ButtonBase.ButtonBaseLabel, { size: size, variant: variant }, children), icon && iconPosition === _types.IconPosition.Right && React.createElement(_ButtonBase.ButtonLabelIcon, { size: size, iconPosition: iconPosition, icon: icon }));
    };
    TextButton.IconPosition = _types.IconPosition;
    TextButton.Variant = _types.TextButtonVariant;
    TextButton.Size = _types.ButtonSize;
    TextButton.defaultProps = {
        iconPosition: _types.IconPosition.Left,
        variant: _types.TextButtonVariant.Default,
        size: _types.ButtonSize.Large
    };
    return TextButton;
}(React.Component);
exports.default = TextButton;