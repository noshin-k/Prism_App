var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || function () {
    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
import * as React from 'react';
import { styled } from '@workday/canvas-kit-labs-react-core';
import isPropValid from '@emotion/is-prop-valid';
import { ButtonSize, DeprecatedButtonVariant, IconPosition, TextButtonVariant } from './types';
import { SystemIcon } from '@workday/canvas-kit-react-icon';
import * as ButtonStyles from './ButtonStyles';
import { getBaseButton, getButtonSize, getButtonStyle } from './utils';
export var ButtonBaseCon = styled('button', {
    shouldForwardProp: function (prop) {
        return isPropValid(prop) && prop !== 'size';
    }
})(function (_a) {
    var variant = _a.variant,
        size = _a.size;
    if (variant === undefined) {
        return {};
    }
    var baseButton = getBaseButton(variant);
    var buttonStyles = getButtonStyle(baseButton, variant);
    var sizeStyles = size !== undefined ? getButtonSize(baseButton, size) : {};
    return __assign({}, baseButton.styles, buttonStyles, sizeStyles);
}, function (_a) {
    var grow = _a.grow;
    return grow && { width: '100%', maxWidth: '100%' };
});
export var ButtonBaseLabel = styled('span', {
    shouldForwardProp: function (prop) {
        return isPropValid(prop) && prop !== 'size';
    }
})(ButtonStyles.labelBaseStyles.styles, function (_a) {
    var size = _a.size;
    var sizes = ButtonStyles.labelBaseStyles.variants.sizes;
    switch (size) {
        case ButtonSize.Large:
        default:
            return sizes.large;
        case ButtonSize.Small:
            return sizes.small;
        case ButtonSize.Medium:
            return sizes.medium;
    }
}, function (_a) {
    var variant = _a.variant;
    var types = ButtonStyles.labelBaseStyles.variants.types;
    switch (variant) {
        case TextButtonVariant.Default:
        case TextButtonVariant.Inverse:
            return types.text;
        case TextButtonVariant.AllCaps:
        case TextButtonVariant.InverseAllCaps:
            return types.textAllCaps;
        case DeprecatedButtonVariant.Primary:
            return types.deprecatedPrimary;
        case DeprecatedButtonVariant.Secondary:
            return types.deprecatedSecondary;
        case DeprecatedButtonVariant.Delete:
            return types.deprecatedDelete;
        default:
            return {};
    }
});
export var ButtonLabelData = styled('span', {
    shouldForwardProp: function (prop) {
        return isPropValid(prop) && prop !== 'size';
    }
})(ButtonStyles.labelDataBaseStyles.styles, function (_a) {
    var size = _a.size;
    var sizes = ButtonStyles.labelDataBaseStyles.variants.sizes;
    switch (size) {
        case ButtonSize.Large:
        default:
            return sizes.large;
        case ButtonSize.Medium:
            return sizes.medium;
    }
});
var ButtonLabelIconStyled = styled('span', {
    shouldForwardProp: function (prop) {
        return isPropValid(prop) && prop !== 'size';
    }
})(ButtonStyles.labelIconBaseStyles.styles, function (_a) {
    var size = _a.size,
        dropdown = _a.dropdown;
    if (dropdown) {
        switch (size) {
            case ButtonSize.Large:
            default:
                return { padding: '0 8px 0 0' };
            case ButtonSize.Medium:
                return { padding: '0 4px 0 0' };
        }
    }
    var sizes = ButtonStyles.labelIconBaseStyles.variants.sizes;
    switch (size) {
        case ButtonSize.Large:
        default:
            return sizes.large;
        case ButtonSize.Medium:
            return sizes.medium;
    }
}, function (_a) {
    var iconPosition = _a.iconPosition;
    if (iconPosition === undefined) {
        return {};
    }
    var types = ButtonStyles.labelIconBaseStyles.variants.types;
    switch (iconPosition) {
        case IconPosition.Left:
        default:
            return types.iconPositionLeft;
        case IconPosition.Right:
            return types.iconPositionRight;
    }
});
var ButtonLabelIcon = function (_super) {
    __extends(ButtonLabelIcon, _super);
    function ButtonLabelIcon() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ButtonLabelIcon.prototype.render = function () {
        var _a = this.props,
            icon = _a.icon,
            size = _a.size,
            dropdown = _a.dropdown,
            iconPosition = _a.iconPosition,
            elemProps = __rest(_a, ["icon", "size", "dropdown", "iconPosition"]);
        if (icon === undefined) {
            return {};
        }
        var iconSize = 24;
        if (size === ButtonSize.Small) {
            iconSize = 20;
        }
        return React.createElement(ButtonLabelIconStyled, __assign({ iconPosition: iconPosition, dropdown: dropdown, size: size }, elemProps), React.createElement(SystemIcon, { size: iconSize, icon: icon }));
    };
    return ButtonLabelIcon;
}(React.Component);
export { ButtonLabelIcon };