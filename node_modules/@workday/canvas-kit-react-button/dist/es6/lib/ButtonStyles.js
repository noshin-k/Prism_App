var __assign = this && this.__assign || function () {
    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
import canvas, { borderRadius } from '@workday/canvas-kit-react-core';
import { ButtonSize, ButtonVariant, DeprecatedButtonVariant, IconButtonVariant, IconPosition, TextButtonVariant } from './types';
import { getButtonStateStyle, getIconButtonStateStyle } from './utils';
export var CANVAS_BUTTON_HEIGHT_LARGE = 40;
export var CANVAS_BUTTON_HEIGHT_MEDIUM = 24;
export var CANVAS_BUTTON_HEIGHT_SMALL = 18;
export var labelBaseStyles = {
    classname: 'button-label',
    styles: {
        position: 'relative',
        ':hover:active': {
            backgroundColor: 'transparent'
        },
        textOverflow: 'ellipsis',
        overflow: 'hidden',
        whiteSpace: 'nowrap',
        fontWeight: 700,
        fontFamily: '"Roboto", "Helvetica Neue", "Helvetica", "Arial", sans-serif',
        WebkitFontSmoothing: 'antialiased',
        MozOsxFontSmoothing: 'grayscale'
    },
    variants: {
        types: (_a = {}, _a[TextButtonVariant.Default] = {
            padding: '0'
        }, _a[TextButtonVariant.AllCaps] = __assign({}, canvas.type.variant.caps, { fontSize: '14px', letterSpacing: '.5px', padding: '0' }), _a[DeprecatedButtonVariant.Primary] = {
            fontSize: 'inherit',
            fontWeight: 'inherit',
            padding: '0'
        }, _a[DeprecatedButtonVariant.Secondary] = {
            fontSize: 'inherit',
            fontWeight: 'inherit',
            padding: '0'
        }, _a[DeprecatedButtonVariant.Delete] = {
            fontSize: 'inherit',
            fontWeight: 'inherit',
            padding: '0'
        }, _a),
        sizes: (_b = {}, _b[ButtonSize.Large] = {
            fontSize: '16px',
            padding: '0 12px'
        }, _b[ButtonSize.Medium] = {
            fontSize: '14px',
            padding: '0 8px'
        }, _b[ButtonSize.Small] = {
            fontSize: '14px',
            padding: '0'
        }, _b)
    }
};
export var labelDataBaseStyles = {
    classname: 'button-label-data',
    styles: __assign({}, labelBaseStyles.styles, { fontWeight: 400, fontSize: '16px' }),
    variants: {
        types: {},
        sizes: (_c = {}, _c[ButtonSize.Large] = {
            paddingRight: '12px'
        }, _c[ButtonSize.Medium] = {
            paddingRight: '8px',
            fontSize: '14px'
        }, _c)
    }
};
export var labelIconBaseStyles = {
    classname: 'button-label-icon',
    styles: {
        display: 'flex'
    },
    variants: {
        types: (_d = {}, _d[IconPosition.Left] = {
            padding: '0 8px 0 0'
        }, _d[IconPosition.Right] = {
            padding: '0 0 0 8px'
        }, _d),
        sizes: (_e = {}, _e[ButtonSize.Large] = {
            paddingLeft: '8px'
        }, _e[ButtonSize.Medium] = {
            paddingLeft: '4px'
        }, _e)
    }
};
export var deprecatedButtonStyles = {
    classname: 'canvas-deprecated-button',
    styles: {
        boxSizing: 'border-box',
        display: 'inline-flex',
        alignItems: 'center',
        justifyContent: 'center',
        fontSize: '13px',
        borderRadius: borderRadius.circle,
        border: '1px solid transparent',
        boxShadow: 'none',
        position: 'relative',
        cursor: 'pointer',
        outline: 'none',
        transition: 'box-shadow 120ms linear, border 120ms linear, background-color 120ms linear, color 120ms linear',
        '&:hover:active': { transitionDuration: '40ms' },
        '&:disabled, &:disabled:active': { cursor: 'default', boxShadow: 'none' }
    },
    variants: {
        types: (_f = {}, _f[DeprecatedButtonVariant.Primary] = __assign({}, getButtonStateStyle(DeprecatedButtonVariant.Primary)), _f[DeprecatedButtonVariant.Secondary] = __assign({}, getButtonStateStyle(DeprecatedButtonVariant.Secondary)), _f[DeprecatedButtonVariant.Delete] = __assign({}, getButtonStateStyle(DeprecatedButtonVariant.Delete)), _f),
        sizes: (_g = {}, _g[ButtonSize.Large] = {
            height: CANVAS_BUTTON_HEIGHT_LARGE + "px",
            padding: "0 " + canvas.spacing.l,
            minWidth: '112px',
            maxWidth: '288px',
            fontSize: '14px',
            fontWeight: 500
        }, _g[ButtonSize.Medium] = {
            height: CANVAS_BUTTON_HEIGHT_MEDIUM + "px",
            padding: "0 " + canvas.spacing.m,
            minWidth: '80px',
            maxWidth: '200px',
            fontSize: '13px',
            fontWeight: 500
        }, _g[ButtonSize.Small] = {
            height: CANVAS_BUTTON_HEIGHT_SMALL + "px",
            padding: "0 " + canvas.spacing.xxs,
            minWidth: '56px',
            maxWidth: '120px',
            fontSize: '10px',
            fontWeight: 500
        }, _g)
    }
};
export var canvasButtonStyles = {
    classname: 'canvas-button',
    styles: __assign({}, deprecatedButtonStyles.styles, { verticalAlign: 'middle', border: '2px solid transparent', fontSize: '14px' }),
    variants: {
        types: (_h = {}, _h[ButtonVariant.Primary] = __assign({}, getButtonStateStyle(ButtonVariant.Primary)), _h[ButtonVariant.Secondary] = __assign({}, getButtonStateStyle(ButtonVariant.Secondary)), _h[ButtonVariant.Delete] = __assign({}, getButtonStateStyle(ButtonVariant.Delete)), _h[ButtonVariant.Highlight] = __assign({}, getButtonStateStyle(ButtonVariant.Highlight)), _h[ButtonVariant.OutlinePrimary] = __assign({}, getButtonStateStyle(ButtonVariant.OutlinePrimary)), _h[ButtonVariant.OutlineSecondary] = __assign({}, getButtonStateStyle(ButtonVariant.OutlineSecondary)), _h[ButtonVariant.OutlineInverse] = __assign({}, getButtonStateStyle(ButtonVariant.OutlineInverse)), _h),
        sizes: (_j = {}, _j[ButtonSize.Large] = {
            minWidth: '112px',
            height: '48px',
            padding: '0 20px'
        }, _j[ButtonSize.Medium] = {
            minWidth: '96px',
            height: canvas.spacing.xl,
            padding: '0 16px'
        }, _j[ButtonSize.Small] = {
            minWidth: '80px',
            height: canvas.spacing.l,
            padding: '0 16px'
        }, _j)
    }
};
export var dropdownButtonStyles = {
    classname: 'dropdown-button',
    styles: __assign({}, canvasButtonStyles.styles),
    variants: {
        types: (_k = {}, _k[ButtonVariant.Primary] = canvasButtonStyles.variants.types[ButtonVariant.Primary], _k[ButtonVariant.Secondary] = canvasButtonStyles.variants.types[ButtonVariant.Secondary], _k),
        sizes: (_l = {}, _l[ButtonSize.Large] = canvasButtonStyles.variants.sizes.large, _l[ButtonSize.Medium] = canvasButtonStyles.variants.sizes.medium, _l)
    }
};
export var textButtonStyles = {
    classname: 'text-button',
    styles: __assign({}, deprecatedButtonStyles.styles, { borderRadius: borderRadius.m, border: '0', margin: '0 8px', minWidth: 'auto', '&:hover:not([disabled])': { textDecoration: 'underline' } }),
    variants: {
        types: (_m = {}, _m[TextButtonVariant.Default] = __assign({}, getButtonStateStyle(TextButtonVariant.Default)), _m[TextButtonVariant.Inverse] = __assign({}, getButtonStateStyle(TextButtonVariant.Inverse)), _m[TextButtonVariant.AllCaps] = __assign({}, getButtonStateStyle(TextButtonVariant.Default), { height: canvas.spacing.l }), _m[TextButtonVariant.InverseAllCaps] = __assign({}, getButtonStateStyle(TextButtonVariant.Inverse), { height: canvas.spacing.l }), _m),
        sizes: (_o = {}, _o[ButtonSize.Large] = {
            height: canvas.spacing.xl,
            padding: '0 8px'
        }, _o[ButtonSize.Small] = {
            height: canvas.spacing.l,
            padding: '0 8px'
        }, _o)
    }
};
export var iconButtonStyles = {
    classname: 'icon-button',
    styles: __assign({}, deprecatedButtonStyles.styles, (_p = { borderWidth: '0', borderRadius: borderRadius.circle }, _p['& .wd-icon'] = {
        display: 'inline-block',
        verticalAlign: 'middle'
    }, _p)),
    variants: {
        sizes: (_q = {}, _q[ButtonSize.Small] = {
            minWidth: canvas.spacing.l,
            width: 'auto',
            height: canvas.spacing.l,
            'span svg': {
                width: '20px',
                height: '20px'
            }
        }, _q[ButtonSize.Medium] = {
            minWidth: canvas.spacing.xl,
            width: canvas.spacing.xl,
            height: canvas.spacing.xl
        }, _q),
        types: (_r = {}, _r[IconButtonVariant.Square] = __assign({ borderRadius: borderRadius.m, minWidth: canvas.spacing.l, width: canvas.spacing.l, height: canvas.spacing.l }, getIconButtonStateStyle(IconButtonVariant.Square)), _r[IconButtonVariant.SquareFilled] = __assign({ borderRadius: borderRadius.m, minWidth: canvas.spacing.l, width: canvas.spacing.l, height: canvas.spacing.l }, getIconButtonStateStyle(IconButtonVariant.SquareFilled)), _r[IconButtonVariant.Plain] = __assign({}, getIconButtonStateStyle(IconButtonVariant.Plain)), _r[IconButtonVariant.Circle] = __assign({}, getIconButtonStateStyle(IconButtonVariant.Circle)), _r[IconButtonVariant.CircleFilled] = __assign({}, getIconButtonStateStyle(IconButtonVariant.CircleFilled)), _r[IconButtonVariant.Inverse] = __assign({}, getIconButtonStateStyle(IconButtonVariant.Inverse)), _r[IconButtonVariant.InverseFilled] = __assign({}, getIconButtonStateStyle(IconButtonVariant.InverseFilled)), _r)
    }
};