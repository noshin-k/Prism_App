var __assign = this && this.__assign || function () {
    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { focusRing, mouseFocusBehavior } from '@workday/canvas-kit-react-common';
import { ButtonSize, DeprecatedButtonVariant, TextButtonVariant, ButtonVariant, IconButtonVariant } from './types';
import * as ButtonStyles from './ButtonStyles';
import { ButtonColors } from './ButtonColors';
export function getButtonSize(baseButton, size) {
    var sizes = baseButton.variants.sizes;
    switch (size) {
        case ButtonSize.Large:
            return sizes.large;
        case ButtonSize.Medium:
        default:
            return sizes.medium;
        case ButtonSize.Small:
            return sizes.small;
    }
}
export function getButtonStyle(baseButton, variant) {
    var types = baseButton.variants.types;
    switch (variant) {
        case DeprecatedButtonVariant.Primary:
            return types[DeprecatedButtonVariant.Primary];
        case DeprecatedButtonVariant.Secondary:
            return types[DeprecatedButtonVariant.Secondary];
        case DeprecatedButtonVariant.Delete:
            return types[DeprecatedButtonVariant.Delete];
        case ButtonVariant.Highlight:
            return types[ButtonVariant.Highlight];
        case ButtonVariant.OutlinePrimary:
            return types[ButtonVariant.OutlinePrimary];
        case ButtonVariant.OutlineSecondary:
            return types[ButtonVariant.OutlineSecondary];
        case ButtonVariant.OutlineInverse:
            return types[ButtonVariant.OutlineInverse];
        case ButtonVariant.Primary:
            return types[ButtonVariant.Primary];
        case ButtonVariant.Secondary:
        default:
            return types[ButtonVariant.Secondary];
        case ButtonVariant.Delete:
            return types[ButtonVariant.Delete];
        case TextButtonVariant.Default:
            return types[TextButtonVariant.Default];
        case TextButtonVariant.Inverse:
            return types[TextButtonVariant.Inverse];
        case TextButtonVariant.AllCaps:
            return types[TextButtonVariant.AllCaps];
        case TextButtonVariant.InverseAllCaps:
            return types[TextButtonVariant.InverseAllCaps];
        case IconButtonVariant.Square:
            return types[IconButtonVariant.Square];
        case IconButtonVariant.SquareFilled:
            return types[IconButtonVariant.SquareFilled];
        case IconButtonVariant.Plain:
            return types[IconButtonVariant.Plain];
        case IconButtonVariant.Circle:
            return types[IconButtonVariant.Circle];
        case IconButtonVariant.CircleFilled:
            return types[IconButtonVariant.CircleFilled];
        case IconButtonVariant.Inverse:
            return types[IconButtonVariant.Inverse];
        case IconButtonVariant.InverseFilled:
            return types[IconButtonVariant.InverseFilled];
    }
}
export function getBaseButton(buttonType) {
    switch (buttonType) {
        case DeprecatedButtonVariant.Primary:
        case DeprecatedButtonVariant.Secondary:
        case DeprecatedButtonVariant.Delete:
            return ButtonStyles.deprecatedButtonStyles;
        case ButtonVariant.Primary:
        case ButtonVariant.Secondary:
        case ButtonVariant.Delete:
        case ButtonVariant.Highlight:
        case ButtonVariant.OutlinePrimary:
        case ButtonVariant.OutlineSecondary:
        case ButtonVariant.OutlineInverse:
        default:
            return ButtonStyles.canvasButtonStyles;
    }
}
export function getButtonFocusRing(variant) {
    var buttonColors = ButtonColors[variant];
    if (buttonColors == null) {
        return {};
    }
    switch (variant) {
        case DeprecatedButtonVariant.Primary:
        case DeprecatedButtonVariant.Secondary:
        case TextButtonVariant.Default:
        case TextButtonVariant.AllCaps:
            return focusRing(2, 0);
        case ButtonVariant.OutlineInverse:
            return focusRing(2, 2, true, false, buttonColors.focusRingInner, buttonColors.focusRingOuter);
        case IconButtonVariant.Plain:
            return focusRing(2);
        case IconButtonVariant.Inverse:
        case IconButtonVariant.InverseFilled:
            return focusRing(2, 2, true, false, buttonColors.focusRingInner, buttonColors.focusRingOuter);
        case TextButtonVariant.Inverse:
        case TextButtonVariant.InverseAllCaps:
            return focusRing(2, 0, true, false, buttonColors.focusRingInner, buttonColors.focusRingOuter);
        default:
            return focusRing(2, 2);
    }
}
export function getButtonStateStyle(variant) {
    var _a, _b, _c, _d, _e;
    var buttonColors = ButtonColors[variant];
    if (buttonColors == null) {
        return {};
    }
    var baseStyles = __assign({ backgroundColor: buttonColors.background, borderColor: buttonColors.border, color: buttonColors.text }, buttonColors.labelIcon && {
        'span .wd-icon-fill, span .wd-icon-accent': {
            transition: 'fill 120ms ease-in',
            fill: buttonColors.labelIcon
        }
    }, buttonColors.labelData && (_a = {}, _a['.' + ButtonStyles.labelDataBaseStyles.classname] = {
        color: buttonColors.labelData
    }, _a));
    var hoverStyles = {
        ':hover': __assign({ backgroundColor: buttonColors.hoverBackground, borderColor: buttonColors.hoverBorder, color: buttonColors.hoverText }, buttonColors.labelDataHover && (_b = {}, _b['.' + ButtonStyles.labelDataBaseStyles.classname] = {
            transition: 'color 120ms ease-in',
            color: buttonColors.labelDataHover
        }, _b), buttonColors.labelIconHover && {
            'span .wd-icon-fill, span .wd-icon-accent': {
                fill: buttonColors.labelIconHover
            }
        })
    };
    var activeStyles = {
        ':active, :focus:active, :hover:active': __assign({ backgroundColor: buttonColors.activeBackground, borderColor: buttonColors.activeBorder, color: buttonColors.activeText }, buttonColors.labelDataActive && (_c = {}, _c['.' + ButtonStyles.labelDataBaseStyles.classname] = {
            color: buttonColors.labelDataActive
        }, _c), buttonColors.labelIconActive && {
            'span .wd-icon-fill, span .wd-icon-accent': {
                fill: buttonColors.labelIconActive
            }
        })
    };
    return __assign({}, baseStyles, { ':focus': __assign({ backgroundColor: buttonColors.focusBackground, borderColor: buttonColors.focusBorder, color: buttonColors.focusText }, buttonColors.labelDataFocus && (_d = {}, _d['.' + ButtonStyles.labelDataBaseStyles.classname] = {
            color: buttonColors.labelDataFocus
        }, _d), buttonColors.labelIconFocus && {
            'span .wd-icon-fill, span .wd-icon-accent': {
                fill: buttonColors.labelIconFocus
            }
        }) }, activeStyles, hoverStyles, { ':disabled, :active:disabled, :focus:disabled, :hover:disabled': __assign({ backgroundColor: buttonColors.disabledBackground, borderColor: buttonColors.disabledBorder, color: buttonColors.disabledText }, buttonColors.labelIconDisabled && {
            'span .wd-icon-fill, span .wd-icon-accent': {
                fill: buttonColors.labelIconDisabled
            }
        }, buttonColors.labelDataDisabled && (_e = {}, _e['.' + ButtonStyles.labelDataBaseStyles.classname] = {
            color: buttonColors.labelDataDisabled
        }, _e)), '&:not([disabled])': {
            '&:focus': __assign({ borderColor: buttonColors.focusBorder }, getButtonFocusRing(variant)),
            '&:active': __assign({ borderColor: buttonColors.activeBorder }, getButtonFocusRing(variant))
        } }, mouseFocusBehavior({
        '&:focus': __assign({}, baseStyles, { outline: 'none', boxShadow: 'none', animation: 'none' }, hoverStyles, activeStyles)
    }));
}
export function getIconButtonStateStyle(variant) {
    var _a, _b, _c;
    var buttonColors = ButtonColors[variant];
    if (buttonColors == null) {
        return {};
    }
    var baseStyles = __assign({ borderColor: buttonColors.border, backgroundColor: buttonColors.background }, buttonColors.labelIcon && {
        'span .wd-icon-fill, span .wd-icon-accent': {
            transition: 'fill 120ms ease-in',
            fill: buttonColors.labelIcon
        }
    }, buttonColors.labelData && (_a = {}, _a['.' + ButtonStyles.labelDataBaseStyles.classname] = {
        color: buttonColors.labelData
    }, _a));
    var hoverStyles = {
        ':hover': __assign({ backgroundColor: buttonColors.hoverBackground }, buttonColors.labelIconHover && {
            'span .wd-icon-fill, span .wd-icon-accent': {
                fill: buttonColors.labelIconHover
            }
        })
    };
    var activeStyles = {
        ':active, :focus:active, :hover:active': __assign({ backgroundColor: buttonColors.activeBackground }, buttonColors.labelIconHover && {
            'span .wd-icon-fill, span .wd-icon-accent': {
                fill: buttonColors.labelIconActive
            }
        })
    };
    return __assign({}, baseStyles, { ':focus': __assign({ backgroundColor: buttonColors.focusBackground }, buttonColors.labelDataFocus && (_b = {}, _b['.' + ButtonStyles.labelDataBaseStyles.classname] = {
            color: buttonColors.labelDataFocus
        }, _b), buttonColors.labelIconFocus && {
            'span .wd-icon-fill, span .wd-icon-accent': {
                fill: buttonColors.labelIconFocus
            }
        }) }, hoverStyles, activeStyles, { ':disabled, :active:disabled, :focus:disabled, :hover:disabled': __assign({ pointerEvents: 'none', backgroundColor: buttonColors.disabledBackground, borderColor: buttonColors.disabledBorder, color: buttonColors.disabledText }, buttonColors.labelIconDisabled && {
            'span .wd-icon-fill, span .wd-icon-accent': {
                fill: buttonColors.labelIconDisabled
            }
        }, buttonColors.labelDataDisabled && (_c = {}, _c['.' + ButtonStyles.labelDataBaseStyles.classname] = {
            color: buttonColors.labelDataDisabled
        }, _c)), '&:not([disabled])': {
            '&:focus': __assign({ background: buttonColors.focusBackground, borderColor: buttonColors.focusBorder }, getButtonFocusRing(variant)),
            '&:active': __assign({ borderColor: buttonColors.activeBorder }, getButtonFocusRing(variant)),
            '&:hover:focus': {
                backgroundColor: buttonColors.focusHover,
                'span .wd-icon-fill, span .wd-icon-accent': {
                    fill: buttonColors.labelIconFocusHover
                }
            },
            '&:focus:active': {
                backgroundColor: buttonColors.activeBackground
            }
        } }, mouseFocusBehavior({
        '&:focus': __assign({}, baseStyles, { outline: 'none', boxShadow: 'none', animation: 'none' }, hoverStyles, activeStyles)
    }));
}