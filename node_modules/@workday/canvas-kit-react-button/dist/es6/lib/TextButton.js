var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        } || function (d, b) {
            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || function () {
    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
import * as React from 'react';
import { ButtonBaseLabel, ButtonLabelIcon } from './ButtonBase';
import { getButtonStyle } from './utils';
import { styled } from '@workday/canvas-kit-labs-react-core';
import isPropValid from '@emotion/is-prop-valid';
import { ButtonSize, IconPosition, TextButtonVariant } from './types';
import { textButtonStyles } from './ButtonStyles';
var TextButtonCon = styled('button', {
    shouldForwardProp: function (prop) {
        return isPropValid(prop) && prop !== 'size';
    }
})(textButtonStyles.styles, function (_a) {
    var variant = _a.variant;
    return getButtonStyle(textButtonStyles, variant);
}, function (_a) {
    var size = _a.size;
    var sizes = textButtonStyles.variants.sizes;
    switch (size) {
        case ButtonSize.Large:
        default:
            return sizes.large;
        case ButtonSize.Medium:
        case ButtonSize.Small:
            return sizes.small;
    }
});
var TextButton = function (_super) {
    __extends(TextButton, _super);
    function TextButton() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TextButton.prototype.render = function () {
        var _a = this.props,
            buttonRef = _a.buttonRef,
            onClick = _a.onClick,
            children = _a.children,
            iconPosition = _a.iconPosition,
            size = _a.size,
            variant = _a.variant,
            icon = _a.icon,
            elemProps = __rest(_a, ["buttonRef", "onClick", "children", "iconPosition", "size", "variant", "icon"]);
        return React.createElement(TextButtonCon, __assign({ onClick: onClick, ref: buttonRef, size: size, variant: variant }, elemProps), icon && iconPosition === IconPosition.Left && React.createElement(ButtonLabelIcon, { size: size, iconPosition: iconPosition, icon: icon }), React.createElement(ButtonBaseLabel, { size: size, variant: variant }, children), icon && iconPosition === IconPosition.Right && React.createElement(ButtonLabelIcon, { size: size, iconPosition: iconPosition, icon: icon }));
    };
    TextButton.IconPosition = IconPosition;
    TextButton.Variant = TextButtonVariant;
    TextButton.Size = ButtonSize;
    TextButton.defaultProps = {
        iconPosition: IconPosition.Left,
        variant: TextButtonVariant.Default,
        size: ButtonSize.Large
    };
    return TextButton;
}(React.Component);
export default TextButton;