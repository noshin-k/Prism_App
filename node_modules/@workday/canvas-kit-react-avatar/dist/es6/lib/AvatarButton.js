var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import styled from '@emotion/styled';
import { AvatarVariant, avatarStyles } from './Avatar';
import { colors } from '@workday/canvas-kit-react-core';
import { focusRing, hideMouseFocus } from '@workday/canvas-kit-react-common';
import { SystemIconCircle, SystemIconCircleSize } from '@workday/canvas-kit-react-icon';
import { userIcon } from '@workday/canvas-system-icons-web';
var AvatarAsButton = styled('button')(__assign({}, avatarStyles), function (_a) {
    var size = _a.size;
    return ({
        height: size,
        width: size,
    });
}, function (_a) {
    var variant = _a.variant, onClick = _a.onClick;
    return (__assign({ cursor: onClick ? 'pointer' : 'default', '&:not([disabled])': {
            '&:focus': __assign({ outline: 'none' }, (variant === AvatarVariant.Dark ? focusRing(2, 2) : focusRing(2))),
        } }, hideMouseFocus));
});
var AvatarButton = (function (_super) {
    __extends(AvatarButton, _super);
    function AvatarButton() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AvatarButton.prototype.render = function () {
        var _a = this.props, buttonRef = _a.buttonRef, variant = _a.variant, altText = _a.altText, size = _a.size, url = _a.url, onClick = _a.onClick, elemProps = __rest(_a, ["buttonRef", "variant", "altText", "size", "url", "onClick"]);
        var background = variant === AvatarVariant.Dark ? colors.blueberry400 : colors.soap300;
        return (React.createElement(AvatarAsButton, __assign({ variant: variant, size: size, url: url, altText: altText, onClick: onClick, disabled: onClick ? false : true, ref: buttonRef, "aria-label": altText }, elemProps), url ? (React.createElement("img", { src: url, alt: altText })) : (React.createElement(SystemIconCircle, { icon: userIcon, background: background, size: size }))));
    };
    AvatarButton.Variant = AvatarVariant;
    AvatarButton.Size = SystemIconCircleSize;
    AvatarButton.defaultProps = {
        variant: AvatarVariant.Light,
        size: SystemIconCircleSize.m,
        altText: 'Avatar',
    };
    return AvatarButton;
}(React.Component));
export default AvatarButton;
