var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import styled from '@emotion/styled';
import isPropValid from '@emotion/is-prop-valid';
import { borderRadius, colors } from '@workday/canvas-kit-react-core';
import { SystemIconCircle, SystemIconCircleSize } from '@workday/canvas-kit-react-icon';
import { userIcon } from '@workday/canvas-system-icons-web';
export var AvatarVariant;
(function (AvatarVariant) {
    AvatarVariant[AvatarVariant["Light"] = 0] = "Light";
    AvatarVariant[AvatarVariant["Dark"] = 1] = "Dark";
})(AvatarVariant || (AvatarVariant = {}));
export var avatarStyles = {
    background: colors.soap200,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 0,
    border: 0,
    borderRadius: borderRadius.circle,
    boxSizing: 'border-box',
    overflow: 'hidden',
    '& img': {
        width: '100%',
        height: '100%',
    },
};
var StyledContainer = styled('div', {
    shouldForwardProp: function (prop) { return isPropValid(prop) && prop !== 'size'; },
})(__assign({}, avatarStyles), function (_a) {
    var size = _a.size;
    return ({
        height: size,
        width: size,
    });
});
var Avatar = (function (_super) {
    __extends(Avatar, _super);
    function Avatar() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Avatar.prototype.render = function () {
        var _a = this.props, variant = _a.variant, altText = _a.altText, size = _a.size, url = _a.url, elemProps = __rest(_a, ["variant", "altText", "size", "url"]);
        var background = variant === AvatarVariant.Dark ? colors.blueberry400 : colors.soap300;
        return (React.createElement(StyledContainer, __assign({ variant: variant, size: size, "aria-label": altText }, elemProps), url ? (React.createElement("img", { src: url, alt: altText })) : (React.createElement(SystemIconCircle, { icon: userIcon, background: background, size: size }))));
    };
    Avatar.Variant = AvatarVariant;
    Avatar.Size = SystemIconCircleSize;
    Avatar.defaultProps = {
        variant: AvatarVariant.Light,
        size: SystemIconCircleSize.m,
        altText: 'Avatar',
    };
    return Avatar;
}(React.Component));
export default Avatar;
