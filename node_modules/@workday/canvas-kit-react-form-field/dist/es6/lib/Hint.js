var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { styled } from '@workday/canvas-kit-labs-react-core';
import { ErrorType } from '@workday/canvas-kit-react-common';
import { spacing, type } from '@workday/canvas-kit-react-core';
var Label = styled('span')(type.body2, type.variant.label);
var Message = styled('p')(type.body2, { width: '100%', margin: spacing.xxs + " 0 0" });
var Hint = (function (_super) {
    __extends(Hint, _super);
    function Hint() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Hint.prototype.render = function () {
        var _a = this.props, children = _a.children, error = _a.error, errorLabel = _a.errorLabel, alertLabel = _a.alertLabel;
        var hintLabel;
        switch (error) {
            case Hint.ErrorType.Error:
                hintLabel = errorLabel;
                break;
            case Hint.ErrorType.Alert:
                hintLabel = alertLabel;
                break;
            default:
        }
        return (React.createElement(Message, __assign({}, this.props),
            typeof error !== 'undefined' && hintLabel && React.createElement(Label, null,
                hintLabel,
                ": "),
            children));
    };
    Hint.ErrorType = ErrorType;
    Hint.defaultProps = {
        errorLabel: 'Error',
        alertLabel: 'Alert',
    };
    return Hint;
}(React.Component));
export default Hint;
