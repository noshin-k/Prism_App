var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import styled from '@emotion/styled';
import { colors, spacing, type } from '@workday/canvas-kit-react-core';
import { accessibleHide as accessibleHideCSS } from '@workday/canvas-kit-react-common';
import { FormFieldLabelPosition } from './types';
var labelStyles = [
    __assign({}, type.body, type.variant.label, { padding: 0 }),
    function (_a) {
        var labelPosition = _a.labelPosition, accessibleHide = _a.accessibleHide;
        if (accessibleHide) {
            return accessibleHideCSS;
        }
        return __assign({}, (labelPosition === FormFieldLabelPosition.Left
            ? {
                marginRight: spacing.l,
                minWidth: 180,
                display: 'flex',
                alignItems: 'center',
                maxHeight: spacing.xl,
            }
            : {
                display: 'block',
                marginBottom: spacing.xxxs,
            }));
    },
];
var RequiredAstrisk = styled('abbr')({
    color: colors.cinnamon500,
    fontSize: '16px',
    fontWeight: 400,
    top: '1px',
    paddingLeft: '2px',
    textDecoration: 'unset',
});
var LegendComponent = styled('legend').apply(void 0, labelStyles);
var LabelComponent = styled('label').apply(void 0, labelStyles);
var Label = (function (_super) {
    __extends(Label, _super);
    function Label() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Label.prototype.render = function () {
        var props = __rest(this.props, []);
        var children = !props.required
            ? props.children
            : [
                props.children,
                React.createElement(RequiredAstrisk, { key: '0', title: props.requiredLabel }, "*"),
            ];
        return (React.createElement(React.Fragment, null, props.isLegend ? (React.createElement(LegendComponent, __assign({}, props, { children: children }))) : (React.createElement(LabelComponent, __assign({}, props, { children: children })))));
    };
    Label.Position = FormFieldLabelPosition;
    Label.defaultProps = {
        labelPosition: Label.Position.Top,
        isLegend: false,
        requiredLabel: 'required',
    };
    return Label;
}(React.Component));
export default Label;
