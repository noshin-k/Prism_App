"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@emotion/core");
var canvas_kit_react_core_1 = __importDefault(require("@workday/canvas-kit-react-core"));
var memoize_1 = __importDefault(require("lodash/memoize"));
function calculateFocusRing(_a) {
    var ringWidth = _a.ringWidth, separationWidth = _a.separationWidth, animate = _a.animate, inset = _a.inset, innerShadowColor = _a.innerShadowColor, outerShadowColor = _a.outerShadowColor;
    var endingInnerShadow = (inset ? 'inset ' : '') + '0 0 0 ' + separationWidth + 'px ' + innerShadowColor;
    var endingOuterShadow = (inset ? 'inset ' : '') + '0 0 0 ' + (ringWidth + separationWidth) + 'px ' + outerShadowColor;
    var endingBoxShadow = inset
        ? "" + endingOuterShadow
        : endingInnerShadow + ", " + endingOuterShadow;
    if (animate) {
        var fadeIn = core_1.keyframes({
            '0%': { boxShadow: endingBoxShadow },
            '100%': { boxShadow: endingBoxShadow },
        });
        return { animation: fadeIn + " 100ms", boxShadow: endingBoxShadow };
    }
    return { boxShadow: endingBoxShadow };
}
exports.memoizedFocusRing = memoize_1.default(calculateFocusRing, function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return JSON.stringify(args);
});
function focusRing(ringWidth, separationWidth, animate, inset, innerShadowColor, outerShadowColor, memoizeCalculation) {
    if (ringWidth === void 0) { ringWidth = 2; }
    if (separationWidth === void 0) { separationWidth = 0; }
    if (animate === void 0) { animate = true; }
    if (inset === void 0) { inset = false; }
    if (innerShadowColor === void 0) { innerShadowColor = canvas_kit_react_core_1.default.colors.frenchVanilla100; }
    if (outerShadowColor === void 0) { outerShadowColor = canvas_kit_react_core_1.default.commonColors.focusOutline; }
    if (memoizeCalculation === void 0) { memoizeCalculation = true; }
    var argsToPass = {
        ringWidth: ringWidth,
        separationWidth: separationWidth,
        animate: animate,
        inset: inset,
        innerShadowColor: innerShadowColor,
        outerShadowColor: outerShadowColor,
    };
    if (memoizeCalculation) {
        return exports.memoizedFocusRing(argsToPass);
    }
    return calculateFocusRing(argsToPass);
}
exports.default = focusRing;
function themedFocusRing(theme, options) {
    if (options === void 0) { options = {}; }
    var _a = options.width, width = _a === void 0 ? 2 : _a, _b = options.separation, separation = _b === void 0 ? 0 : _b, _c = options.animate, animate = _c === void 0 ? true : _c, _d = options.inset, inset = _d === void 0 ? false : _d, _e = options.innerColor, innerColor = _e === void 0 ? canvas_kit_react_core_1.default.colors.frenchVanilla100 : _e, _f = options.outerColor, outerColor = _f === void 0 ? theme.palette.common.focusOutline : _f, _g = options.memoize, memoize = _g === void 0 ? true : _g;
    var args = {
        ringWidth: width,
        separationWidth: separation,
        innerShadowColor: innerColor,
        outerShadowColor: outerColor,
        animate: animate,
        inset: inset,
    };
    if (memoize) {
        return exports.memoizedFocusRing(args);
    }
    return calculateFocusRing(args);
}
exports.themedFocusRing = themedFocusRing;
